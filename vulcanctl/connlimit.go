package main

import (
	"github.com/codegangsta/cli"
)

func NewConnLimitCommand() cli.Command {
	addFlags := []cli.Flag{
		cli.StringFlag{"id", "", "connection limit id, autogenerated if omitted"},
		cli.StringFlag{"host", "", "location's host"},
		cli.StringFlag{"loc", "", "location"},
		cli.StringFlag{"var", "client.ip", "variable to limit against, e.g. client.ip, request.host or request.header.X-Header"},
		cli.IntFlag{"connections", 1, "amount of simultaneous connections to allow per variable"},
	}
	return cli.Command{
		Name:  "connlimit",
		Usage: "Operations with connection limits",
		Subcommands: []cli.Command{
			{
				Name:   "add",
				Usage:  "Add a new connection limit to a location",
				Flags:  addFlags,
				Action: addConnLimitAction,
			},
			{
				Name:   "update",
				Usage:  "Update existing connection limit",
				Flags:  addFlags,
				Action: updateConnLimitAction,
			},
			{
				Name:  "rm",
				Usage: "Delete connection limit from location",
				Flags: []cli.Flag{
					cli.StringFlag{"id", "", "connection limit id"},
					cli.StringFlag{"host", "", "location's host"},
					cli.StringFlag{"loc", "", "location"},
				},
				Action: deleteConnLimitAction,
			},
		},
	}
}

func addConnLimitAction(c *cli.Context) {
	printStatus(
		client(c).AddConnLimit(
			c.String("host"),
			c.String("loc"),
			c.String("id"),
			c.String("var"),
			c.String("connections")))
}

func updateConnLimitAction(c *cli.Context) {
	printStatus(
		client(c).UpdateConnLimit(
			c.String("host"),
			c.String("loc"),
			c.String("id"),
			c.String("var"),
			c.String("connections")))
}

func deleteConnLimitAction(c *cli.Context) {
	printStatus(client(c).DeleteRateLimit(
		c.String("host"),
		c.String("loc"),
		c.String("id")))
}
